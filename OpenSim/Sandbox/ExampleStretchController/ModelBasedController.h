#ifndef _ModelBasedController_h_
#define _ModelBasedController_h_
/* -------------------------------------------------------------------------- *
 *                   OpenSim:  ModelBasedController.h                    *
 * -------------------------------------------------------------------------- *
 * The OpenSim API is a toolkit for musculoskeletal modeling and simulation.  *
 * See http://opensim.stanford.edu and the NOTICE file for more information.  *
 * OpenSim is developed at Stanford University and supported by the US        *
 * National Institutes of Health (U54 GM072970, R24 HD065690) and by DARPA    *
 * through the Warrior Web program.                                           *
 *                                                                            *
 * Copyright (c) 2005-2016 Stanford University and the Authors                *
 * Author(s): Chris Dembia, Shrinidhi K. Lakshmikanth, Ajay Seth,             *
 *            Thomas Uchida                                                   *
 *                                                                            *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may    *
 * not use this file except in compliance with the License. You may obtain a  *
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0.         *
 *                                                                            *
 * Unless required by applicable law or agreed to in writing, software        *
 * distributed under the License is distributed on an "AS IS" BASIS,          *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *
 * See the License for the specific language governing permissions and        *
 * limitations under the License.                                             *
 * -------------------------------------------------------------------------- */


#include <OpenSim/OpenSim.h>

static const double COORDINATE_TARGET{ -0.1 };

namespace OpenSim {

class ModelBasedController : public Controller {
	OpenSim_DECLARE_CONCRETE_OBJECT(ModelBasedController, Controller);

public:
	// Property of the controller for gain on the length error signal
	OpenSim_DECLARE_PROPERTY(length_gain, double,
		"Gain used to convert length error to a control signal");

	// Property of the controller for threshold on the length error signal
	OpenSim_DECLARE_PROPERTY(length_threshold, double,
		"Length error above this threshold generates a control signal");

	// Connector to the PathActuator for which the controller computes a
	// control signal.
	OpenSim_DECLARE_CONNECTOR(actuator, PathActuator,
		"The actuator for which the controller computes a control signal.");

	// Input the length to use in the stretch controller
	OpenSim_DECLARE_INPUT(length, double, SimTK::Stage::Model,
		"The input length.");

	// Input the set point for the length 
	OpenSim_DECLARE_INPUT(length_setpoint, double, SimTK::Stage::Model,
		"The desired length.");

	// Output the control signal generated by the controller.
	OpenSim_DECLARE_OUTPUT(stretch_control, double, computeControl,
		SimTK::Stage::Time);
	
	ModelBasedController() {
		constructProperties();
	}

	void updateTargetState(const SimTK::State& s) const {
		double setpoint = getInputValue<double>(s, "length_setpoint");

		//SimTK::State targetState = s;
		_internalModel->updCoordinateSet()[5].setValue(*_targetState, setpoint, false);
		_internalModel->realizePosition(*_targetState);
	}

	// Member function for computing the proportional control signal k*a.
	double computeControl(const SimTK::State& s) const {
		updateTargetState(s);

		Actuator& act = _internalModel->updActuators()[0];
		const PathActuator* muscle1 = dynamic_cast<PathActuator*>(&act);
		double length_setPoint = muscle1->getLength(*_targetState);
		double error =
			getInputValue<double>(s, "length") - length_setPoint;
		return (error < get_length_threshold()) ?
			0. : get_length_gain() * error;
	}

	// Member function for adding the control signal computed above into the
	// actuator's Vector of controls.
	void computeControls(const SimTK::State& s,
		SimTK::Vector& controls) const override {
		double signal = computeControl(s);
		const auto& actuator = getConnectee<ScalarActuator>("actuator");
		SimTK::Vector thisActuatorsControls(1, signal);
		actuator.addInControls(thisActuatorsControls, controls);
	}

	void setTargetState(SimTK::State* s) {
		_targetState = s;
	}

	void setInternalModel(Model* model) {
		_internalModel = model;
	}

	void setTargetGeometry(Geometry* geom) {
		_targetGeometry = geom;
	}

	void setTargetFrame(PhysicalOffsetFrame* frame) {
		_targetFrame = frame;
	}

private:
	void constructProperties() {
		constructProperty_length_gain(1.0);
		constructProperty_length_threshold(0.0);
	}

	void extendAddToSystem(SimTK::MultibodySystem& system) {
		Super::extendAddToSystem(system);

		//_internalModel = getModel().clone();

		//if (_internalModel == NULL) {
		//	Model im = getModel().clone();
		//	_internalModel = im.clone();
		//}

		//Model im = getModel();
		//SimTK::State saveState = s;
		//im.getCoordinateSet()[0].getValue(s);

		//_internalModel->initStateWithoutRecreatingSystem(s);

	}

	// Implement generateDecorations by WrapSphere to replace the previous out of place implementation 
	// in ModelVisualizer
	void generateDecorations(bool fixed, const ModelDisplayHints& hints, const SimTK::State& state,
		SimTK::Array_<SimTK::DecorativeGeometry>& appendToThis) const
	{
		Super::generateDecorations(fixed, hints, state, appendToThis);
		if (fixed) return;

		updateTargetState(state);

		const SimTK::Vec3 color(SimTK::Cyan);
		const SimTK::Transform& X_GW = getModel().getBodySet()[0].getTransformInGround(*_targetState);
		//Geometry& geom = *(getModel().getBodySet()[0].get_attached_geometry(0).clone());
		// TODO get correct geometry from the model
		appendToThis.push_back(
				SimTK::DecorativeSphere(0.1)
				.setTransform(X_GW).setResolution(2.0)
				.setColor(color).setOpacity(0.5));
	}

	Model* _internalModel;
	SimTK::State* _targetState;
	Geometry* _targetGeometry;
	PhysicalOffsetFrame* _targetFrame;

}; // end of ModelBasedController


} // end of namespace OpenSim

#endif // _ModelBasedController_h_
