/* -------------------------------------------------------------------------- *
 *                     OpenSim:  exampleHopperDevice.cpp                      *
 * -------------------------------------------------------------------------- *
 * The OpenSim API is a toolkit for musculoskeletal modeling and simulation.  *
 * See http://opensim.stanford.edu and the NOTICE file for more information.  *
 * OpenSim is developed at Stanford University and supported by the US        *
 * National Institutes of Health (U54 GM072970, R24 HD065690) and by DARPA    *
 * through the Warrior Web program.                                           *
 *                                                                            *
 * Copyright (c) 2005-2016 Stanford University and the Authors                *
 * Author(s): Chris Dembia, Shrinidhi K. Lakshmikanth, Ajay Seth,             *
 *            Thomas Uchida                                                   *
 *                                                                            *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may    *
 * not use this file except in compliance with the License. You may obtain a  *
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0.         *
 *                                                                            *
 * Unless required by applicable law or agreed to in writing, software        *
 * distributed under the License is distributed on an "AS IS" BASIS,          *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   *
 * See the License for the specific language governing permissions and        *
 * limitations under the License.                                             *
 * -------------------------------------------------------------------------- */


#include <OpenSim/OpenSim.h>
#include "helperMethods.h"
#include "StretchController.h"

static const double SIGNAL_GEN_CONSTANT{ 0.0 };
static const double REPORTING_INTERVAL{ 0.2 };
static const double LENGTH_GAIN = 100.0;
static const std::string testbedAttachment1{"ground"};
static const std::string testbedAttachment2{"load"};
using namespace std;
namespace OpenSim {

// Forward declarations for methods used below.
Model buildTestbed();   //defined in defineStretchController.h

class ControllerHolder : public ModelComponent {
	OpenSim_DECLARE_CONCRETE_OBJECT(ControllerHolder, ModelComponent);
public:
	// Input the muscle fiber length to use in the stretch controller
	OpenSim_DECLARE_LIST_INPUT(fiberLength, double, SimTK::Stage::Model,
		"List of input length ");
	// Input the muscle fiber length to use in the stretch controller
	OpenSim_DECLARE_LIST_INPUT(fiberLength_setpoint, double, SimTK::Stage::Model,
		"List of input length ");

	// Output the control signal generated by the controller.
	OpenSim_DECLARE_LIST_OUTPUT(stretch_control, double, computeControl,
		SimTK::Stage::Time);
	ControllerHolder() {
	}
	
	// Member function for computing the proportional control signal k*a.
	double computeControl(const SimTK::State& s, const string& channel) const
	{

		//cout << "I have been called for channel "<< channel << endl;
		//cout << getInput<double>("fiberLength").getConnecteeName(0) << endl;
		
		return 0;
	}
protected:
	void extendFinalizeFromProperties() override {
		Super::extendFinalizeFromProperties();
		//TODO add channels 
		cout << "extend called" << endl;

		auto& outputs = updOutput("stretch_control");
		cout << "extend 1" << endl;
		
		for (int i = 0; i < 6; i++) {
			//cout << "chan name" << actuators[i].getName() << endl;// Name is Empty
			string name = ""; //actuators[i].getName();
			if (false) {
				//outputs.addChannel(actuators[i].getName());
				//cout << "added " << name << " to output" << endl;
			}
			else {
				try {
					name = "muscle_" + to_string(i);
					outputs.addChannel(name);
					cout << "added " << name << " to output" << endl;
				}
				catch (Exception& e) {
					cout << e.what() << endl;
				}
			}

		}
		cout << "extend ended" << endl;
	}
	
	
};
//------------------------------------------------------------------------------
// Build the StretchController.
//------------------------------------------------------------------------------

Controller* buildStretchController(const Muscle& m) {
	try {
		cout << "building controller for muscle " << m.getName() << endl;
		auto controller = new StretchController();
		controller->setName("stretchCon_"+m.getName());
		controller->set_length_gain(LENGTH_GAIN);
		
		controller->updInput("fiberLength").connect(m.getOutput("fiber_length"));  
		controller->updConnector("actuator").connect(m); 
		return controller;
	}
	catch (Exception e) {
		cout << e.what() << endl;
	}
}


//------------------------------------------------------------------------------
// Attach the stretch controller to a model
//------------------------------------------------------------------------------
void connectControllerToModel(Controller& controller, Model& model)
{
	model.addController(&controller);

}

//------------------------------------------------------------------------------
// Add a SignalGenerator to a StretchController.
//------------------------------------------------------------------------------
void addSignalGeneratorToController(Controller& controller)
{
    auto lengthSignalGen = new SignalGenerator();
	lengthSignalGen->setName("lengthSetPointGen");

    // Try changing the constant value and/or the function (e.g., try a
    // LinearFunction).
	lengthSignalGen->set_function(Constant(SIGNAL_GEN_CONSTANT));
	controller.addComponent(lengthSignalGen);
	
	// Connect the signal generator's output signal to the controller's
    // setpoint 
	controller.updInput("fiberLength_setpoint")
        .connect(lengthSignalGen->getOutput("signal"));
} 


//------------------------------------------------------------------------------
// Add a ConsoleReporter to a model for displaying outputs from a device.
//------------------------------------------------------------------------------
void addDeviceConsoleReporterToModel(Model& model, Component& holder,
    const std::vector<std::string>& deviceOutputs)
{
    // Create a new ConsoleReporter. Set its name and reporting interval.
    auto reporter = new ConsoleReporter();
    reporter->setName(model.getName() + "_" + holder.getName() + "_results");
    reporter->set_report_time_interval(REPORTING_INTERVAL);

    // Loop through the desired device outputs and add them to the reporter.
	for (auto thisOutputName : deviceOutputs) {
		reporter->updInput("inputs").connect(holder.getOutput(thisOutputName));
		cout << "added" << endl;
	}

    // Add the reporter to the model.
    model.addComponent(reporter);
}

} // namespace OpenSim


//------------------------------------------------------------------------------
// START HERE! Toggle "if (false)" to "if (true)" to enable/disable each step in
// the exercise. The project should execute without making any changes (you
// should see the unassisted hopper hop slightly).
//------------------------------------------------------------------------------
/*int main()
{
	try {
    using namespace OpenSim;
	using namespace std;
    
	//==========================================================================
	// Step 2. Build an stretch controller for arm model.
	//==========================================================================

		
	auto model = Model("arm26.osim");
	model.setUseVisualizer(true);
	model.setGravity(SimTK::Vec3(0));
	ControllerHolder* holder = new ControllerHolder();
	for (int i = 0; i < 1/*model.getMuscles().getSize(); i++) {
		//cout << "before create controller" << endl;
		auto controller = buildStretchController(model.getMuscles()[i]);
		//cout << "after create controller" << endl;


		// Connect the controller to the testbed.
		//model.addComponent(controller);
		//model.addController(controller);
		//cout << "done addComponent(controller)" << endl;

		// Use a SignalGenerator to create a set point signal for testing the
		// controller. 
		addSignalGeneratorToController(*controller);

		// Show all Components in the model.
		//showSubcomponentInfo(model);
		//showSubcomponentInfo(*controller);

		holder->addComponent(controller);

	}

	// add generator
	//auto lengthSignalGen = new SignalGenerator();
	//lengthSignalGen->setName("lengthSetPointGen");

	//lengthSignalGen->set_function(Constant(SIGNAL_GEN_CONSTANT));
	//holder->addComponent(lengthSignalGen);
	//const Set<Muscle>& muscles = model.getMuscles();
	//cout << "1" << endl;
	/*
	for (int i = 0; i < muscles.getSize(); i++) {
		cout << "4 " << endl;
		//holder->updInput("fiberLength").connect(muscles[i].getOutput("fiber_length"));
		//holder->updInput("fiberLength_setpoint")
		//	.connect(lengthSignalGen->getOutput("signal"));
		//cout << muscles[i].getName() << " connected" << endl;


		//add controller
		//auto controller = new StretchController();
		//controller->setName("stretchCon");
		//controller->set_length_gain(LENGTH_GAIN);

		controller->updInput("fiberLength").connect(muscles[i].getOutput("fiber_length"));
		controller->updInput("fiberLength_setpoint").connect(lengthSignalGen->getOutput("signal"));
		controller->updConnector("actuator").connect(muscles[i]);
		
		holder->addComponent(controller);
	}
	
	
	cout << "befor model.addcomp" << endl;
	model.addComponent(holder);
	cout << "after model.addcomp" << endl;
	
	showSubcomponentInfo(*holder);
	showSubcomponentInfo(model);
	
	// List the device outputs we wish to display during the simulation.
	//std::vector<std::string> controllerOutputs{ "stretch_control" };
	// Add a ConsoleReporter to report deviceOutputs.
	//addDeviceConsoleReporterToModel(model, *holder, controllerOutputs);
		
	// Create the system, initialize the state, and simulate.
	SimTK::State& sDev = model.initSystem();
		
		
	simulate(model, sDev);
	

}
catch (const std::exception& e) {
	std::cout << e.what() << std::endl;
}
system("pause");
return 0;

};*/
using namespace OpenSim;
int main() {
	Model& model = Model("arm26.osim");
	model.setUseVisualizer(true);

	const Set<Muscle>& muscles = model.getMuscles();
	
	ControllerHolder* holder = new ControllerHolder();
	holder->setName("StretchControllerHolder");

	// add generator
	auto lengthSignalGen = new SignalGenerator();
	lengthSignalGen->setName("lengthSetPointGen");

	lengthSignalGen->set_function(Constant(SIGNAL_GEN_CONSTANT));
	holder->addComponent(lengthSignalGen);

	
	for (int i = 0; i < muscles.getSize(); i++) {
	
		holder->updInput("fiberLength").connect(muscles[i].getOutput("fiber_length"));	
		holder->updInput("fiberLength_setpoint")
			.connect(lengthSignalGen->getOutput("signal"));
		cout << muscles[i].getName() << " connected" << endl;
		
	}

	
	const Input<double>& fLength = holder->getInput<double>("fiberLength");
	const Input<double>& fSetP   = holder->getInput<double>("fiberLength_setpoint");
	for (int i = 0; i <  muscles.getSize();i++) {
		//add controller
		auto* controller = new StretchController();
		controller->setName("stretchCon_" + muscles[i].getName());
		controller->set_length_gain(LENGTH_GAIN);
		
		controller->updInput("fiberLength").connect(fLength.getChannel(i));
		controller->updInput("fiberLength_setpoint").connect(fSetP.getChannel(i));
		controller->updConnector("actuator").connect(muscles[i]);
		holder->addComponent(controller);
	}
	

	
	
	model.addComponent(holder);
	

	showSubcomponentInfo(*holder);
	

	// List the device outputs we wish to display during the simulation.
	std::vector<std::string> controllerOutputs{ "stretch_control" };
	addDeviceConsoleReporterToModel(model, *holder, controllerOutputs);
	
	// Create the system, initialize the state, and simulate.
	try {
		SimTK::State& sDev = model.initSystem();
		simulate(model, sDev);
	}
	catch (Exception& e) {
		cout << e.what() << endl;
	}
	system("pause");
	return 0;
}
